"""
탈출 열쇠(연구소 출입용*필드/ 치료제*연구소)

-아이템
1. 횟불 (원방향으로
2. 손전등 (원뿔
3. 회복약 ( 3/3 )1+
4. 무기(전기톱/도끼/쇠파이프/꽝(짬뽕/휴지/*투척용)
5. 치료제(탈출 할때 필수)
6.

-몬스터
(이동속도 다르게 구성)
1.좀비🧟
2.괴물🧌(속도 빠름)
3.귀신--

-인벤토리
-상태창

-무기(0) 공격
-무기(X) 체력 -- (좀비는 가만히 대기) 후 도망


맵 (아이템 동일)
1.필드
	이동: W (위), A (왼쪽), S (아래), D (오른쪽)

2.연구소
	-치료제는 여기서만

----------------------------------------------------------

몬스터의 추격: 좌표기반 / 1칸
몬스터와 전투: 좌표 겹치면
아이템의 사용: 인벤 사용키 1/2/3/4
시야 제한: 3x3
스테이지 구성: 숲 3개 / 연구소 1~2층
스테이지 이동: 열쇠 상자
무기
하단 status
맵 생성: 랜덤
아이템을 얻는 방법: 좌표계
아이템의 사용 여부
틱 으로 낮밤

1조: 아이템
2조: 캐릭터/ 인벤
3조: 몬스터
4조(팀장): 맵/ 틱 (game manager)
"""

import Map

window_width = 120
window_height = 40

status_panel_width = 60
status_panel_height = 10

map_width = window_width - 2
map_height = window_height - 3 - 10

# 게임 매니저
#  - 이동 체크
#  - 각 조의 속성, 메서드 호출만
#  - 플레이어와 적 사이에서 통보
#  - 메시지 출력

# 맵
#  - 맵 생성
#  - 맵 코드

# 우선순위
# 캐릭터
# 몬스터
# 아이템

# TODO 전체 화면 출력 테스트
def main():
    # 전체 레이아웃 생성
    for h in range(window_height):
        for w in range(window_width):
            if h == 0 or h == window_height - 1:
                print("=", end="")
            else:
                print(" ", end="")
            if w == 0 or w == window_width - 1:
                print("│", end="")
        print()


    # 플레이어: 맵 정보 알고 있음.
    # 좀비: 맵 정보는 모름, 대신 플레이어 좌표는 알고 있고, 사용할지 안할지는 상황에 따라.

    # 초기 맵 생성
    # - 아이템, 적 초기 위치 포함
    # - 목표 위치
    m = Map.Map()
    #m.generate_maze_map(map_width, map_height)



    # 플레이어 상태 초기화
    #
    #

    # TODO 키보드 입력 받기
    # --- 이동 판단 ---
    # 캐릭터 이동 판단
    # - 지형
    # - 적
    # - 아이템
    #


    # --- 화면 갱신 ---
    # 맵
    # 몬스터
    # 플레이어

    pass



if __name__ == "__main__":
    main()